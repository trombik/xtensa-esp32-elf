# TODOs
#
# * publish packages on GitHub Pages when releasing
# * support quaterly/latest ports
# * support other FreeBSD releases
# * generate a kye and sign the packages with it
#
# known issues
#
# * caching does not work as I wish. do not expect *_cache implementations are
#   right.

env:
  HOME: /root
  PATH: /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
  USER: root

build_task:
  matrix:
    # XXX divide the CI into multiple per-package build using matrix. max
    # timeout_in for a single task is limited to two hours. because of that,
    # the build (which takes more than two hours) fails. this is not a
    # portable, nor a generic solution for other ports.
    #
    # XXX use compute_engine_instance, instead of freebsd_instance, which is a
    # syntactic sugar. with freebsd_instance, disk parameter is ignored.
    # see https://github.com/cirruslabs/cirrus-ci-docs/issues/911
    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd
        cpu: 4
        memory: 8
        disk: 80
      env:
        PD_ORIGIN: devel/riscv32-esp-elf
        PD_ALLOW_MAKE_JOBS_PACKAGES: "riscv32-esp-elf*"

    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd
        cpu: 4
        memory: 8
        disk: 80
      env:
        PD_ORIGIN: devel/xtensa-esp32-elf
        PD_ALLOW_MAKE_JOBS_PACKAGES: "xtensa-esp32-elf*"

    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd
        cpu: 4
        memory: 8
        disk: 80
      env:
        PD_ORIGIN: devel/xtensa-esp32s2-elf
        PD_ALLOW_MAKE_JOBS_PACKAGES: "xtensa-esp32s2-elf*"

    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd
        cpu: 4
        memory: 8
        disk: 80
      env:
        PD_ORIGIN: devel/binutils-esp32s2ulp
        PD_ALLOW_MAKE_JOBS_PACKAGES: "binutils-esp32s2ulp"

    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd
        cpu: 4
        memory: 8
        disk: 80
      env:
        PD_ORIGIN: devel/binutils-esp32ulp
        PD_ALLOW_MAKE_JOBS_PACKAGES: "binutils-esp32ulp"

  # increase timeout_in. in most cases, build will not finish in 60m, which is
  # the default. the default is not documented at
  # https://cirrus-ci.org/guide/writing-tasks/, but at https://cirrus-ci.org/faq/
  # the max timeout_in is two hours.
  timeout_in: 120m
  define_common_variables_script: |

    # define common variavles used in *_script. remember to export variables
    # at the end of this script.
    PD_WORKDIR="${CIRRUS_WORKING_DIR}"
    PD_BASEFS="${PD_WORKDIR}/poudriere"
    PD_CCACHE_DIR=/var/cache/ccache
    PD_REQUIRED_PACKAGES="ports-mgmt/poudriere-devel ports-mgmt/portshaker ports-mgmt/portshaker-config git-lite"

    # the branch to use for the FreeBSD ports tree.
    # see https://github.com/freebsd/freebsd-ports/branches for available
    # branches
    PD_FREEBSD_PORTS_BRANCH="2021Q3"

    # the branch to use for the FreeBSD package tree. the build fetches
    # and installs packages required by PD_ALL_ORIGIN.
    # see https://pkg.freebsd.org/FreeBSD:13:amd64/ for available branches
    PD_FREEBSD_PACKAGE_BRANCH=quarterly

    # e.g. 122
    PD_VERSION_SHORT=`uname -r | sed -e 's/-.*//' -e 's/\.//'`

    # e.g. amd64
    PD_MACHINE=`uname -m`

    # e.g. 12.2-RELEASE
    PD_RELEASE_NAME=`uname -r | sed -e 's/-p.*//'`

    # e.g. 122amd64
    PD_JAIL_NAME="${PD_VERSION_SHORT}${PD_MACHINE}"
    PD_PORTS_NAME="default"

    # e.g 122amd64-default
    PD_BUILD_NAME="${PD_JAIL_NAME}-${PD_PORTS_NAME}"

    # `export` the variables so that other scripts can use them.
    #
    # note that the ${CIRRUS_ENV} file is NOT a shell script. empty line is
    # not allowed. value should NOT be quoted (i.e. NOT `foo="bar buz"`. use
    # `foo=bar buz` instead).
    cat << __EOF__ >> ${CIRRUS_ENV}
    PD_WORKDIR=${PD_WORKDIR}
    PD_BASEFS=${PD_BASEFS}
    PD_CCACHE_DIR=${PD_CCACHE_DIR}
    PD_REQUIRED_PACKAGES=${PD_REQUIRED_PACKAGES}
    PD_VERSION_SHORT=${PD_VERSION_SHORT}
    PD_MACHINE=${PD_MACHINE}
    PD_RELEASE_NAME=${PD_RELEASE_NAME}
    PD_JAIL_NAME=${PD_JAIL_NAME}
    PD_PORTS_NAME=${PD_PORTS_NAME}
    PD_BUILD_NAME=${PD_BUILD_NAME}
    PD_FREEBSD_PORTS_BRANCH=${PD_FREEBSD_PORTS_BRANCH}
    PD_FREEBSD_PACKAGE_BRANCH=${PD_FREEBSD_PACKAGE_BRANCH}
    __EOF__
    cat ${CIRRUS_ENV}

  setup_script: |
    uname -msr
    sysctl kern.osreldate
    sysctl hw.ncpu
    top -bP
    env | sort
    df -h
    mount

    # configure _merged_ ports tree
    cat << __EOF__ > /usr/local/etc/portshaker.conf
    mirror_base_dir="/var/cache/portshaker"
    ports_trees="${PD_PORTS_NAME}"
    default_ports_tree="${PD_BASEFS}/ports/${PD_PORTS_NAME}"
    default_merge_from="github:freebsd:freebsd-ports:${PD_FREEBSD_PORTS_BRANCH} github:${CIRRUS_REPO_OWNER}:${CIRRUS_REPO_NAME}:${CIRRUS_BRANCH}"
    fail_on_conflict="y"

    __EOF__

    # configure poudriere
    cat << __EOF__ > /usr/local/etc/poudriere.conf
    NO_ZFS=yes
    BASEFS=${PD_BASEFS}
    USE_TMPFS=data
    FREEBSD_HOST=https://download.FreeBSD.org
    FLAVOR_DEFAULT_ALL=yes
    DISTFILES_CACHE=${PD_BASEFS}/ports/${PD_PORTS_NAME}/distfiles
    CCACHE_DIR=${PD_CCACHE_DIR}
    ALLOW_MAKE_JOBS_PACKAGES="${PD_ALLOW_MAKE_JOBS_PACKAGES}"

    # increase MAX_FILES. crosstool-NG.sh tries to modify ulimit during the
    # build, which is not allowed.
    #
    # crosstool-NG.sh: line 112: ulimit: open files: cannot modify limit: Operation not permitted
    MAX_FILES=4096

    __EOF__
    cat /usr/local/etc/poudriere.conf

  required_packages_cache:
    folder: /var/cache/pkg
    fingerprint_script:
      - uname -msr
      - echo 20210909
    populate_script: |

      # do NOT quote PD_REQUIRED_PACKAGES
      pkg fetch --dependencies --yes ${PD_REQUIRED_PACKAGES}

  required_packages_install_script: |

    # do NOT quote PD_REQUIRED_PACKAGES
    pkg install --yes ${PD_REQUIRED_PACKAGES}

  ports_tree_cache:
    folder: /var/cache/portshaker/github_freebsd_freebsd-ports_${PD_FREEBSD_PORTS_BRANCH}
    fingerprint_script:
      - echo github_freebsd_freebsd-ports_${PD_FREEBSD_PORTS_BRANCH}
      - echo 20210909
    populate_script: |
      time -h portshaker -u github:freebsd:freebsd-ports:${PD_FREEBSD_PORTS_BRANCH}

  ports_tree_install_script: |
    echo Updating "github:${CIRRUS_REPO_OWNER}:${CIRRUS_REPO_NAME}:${CIRRUS_BRANCH}"
    portshaker -u "github:${CIRRUS_REPO_OWNER}:${CIRRUS_REPO_NAME}:${CIRRUS_BRANCH}"

    # create the merged ports tree
    time -h portshaker -M

    # create the merged ports tree
    poudriere ports -c -p "${PD_PORTS_NAME}" -M "${PD_BASEFS}/ports/${PD_PORTS_NAME}" -m null

    # ensure DISTFILES_CACHE exists
    mkdir -p "${PD_BASEFS}/ports/${PD_PORTS_NAME}/distfiles"

  create_jail_script: |

    # cannot cache jails at the moment. see:
    # https://github.com/freebsd/poudriere/issues/137
    #
    # also, the size of ${PD_BASEFS}/jails is too big to cache, and
    # cirrus-ci refuses to cache
    poudriere jail -c -j "${PD_JAIL_NAME}" -m ftp -v "${PD_RELEASE_NAME}"

  build_script: |

    # create artifacts directory
    #
    # https://cirrus-ci.org/guide/writing-tasks
    # "Right now only storing files under $CIRRUS_WORKING_DIR folder as
    # artifacts is supported with a total size limit of 1G for a community
    # task"
    mkdir -p "${CIRRUS_WORKING_DIR}/logs"

    # create a list of all packages in the repository
    # PD_ALL_ORIGIN=`echo */* | sed -e 's|/[[:space:]]| |g' -e 's|/$||'`

    poudriere ports -l
    poudriere jail -l

    # build PD_ORIGIN
    echo "Building ${PD_ORIGIN}"

    # use -b flag to pre-install binary packages on which ${PD_ORIGIN}
    # depends. it saves time by skipping depended builds. -b flag requires
    # ports-mgmt/poudriere-devel.
    poudriere bulk -j "${PD_JAIL_NAME}" -p "${PD_PORTS_NAME}" -b "${PD_FREEBSD_PACKAGE_BRANCH}" -t -C "${PD_ORIGIN}"
  copy_packages_script: |

    __PD_SRC="${PD_BASEFS}/data/packages/${PD_BUILD_NAME}/.latest/All"
    __PD_DEST="${PD_WORKDIR}/packages/${PD_BUILD_NAME}"

    ls -alR "${__PD_SRC}"
    mkdir -p "${__PD_DEST}"
    cp -R "${__PD_SRC}"/*  "${__PD_DEST}"
    ls -alR "${__PD_DEST}"

  packages_artifacts: |

    # can be downloaded at:
    # https://api.cirrus-ci.com/v1/artifact/build/<CIRRUS_BUILD_ID>/<ARTIFACTS_NAME>.zip
    # path: "packages/*"
    #
    # Error from upload stream: rpc error: code = Unknown desc =
    path: "packages/*.txz"

  on_failure:
    show_error_log_script: |

      for F in ${PD_BASEFS}/data/logs/bulk/${PD_BUILD_NAME}/latest/logs/errors/*.log; do
        echo "${F}"
        cat "${F}"
      done
  always:
    copy_log_script: |

      cp ${PD_BASEFS}/data/logs/bulk/${PD_BUILD_NAME}/latest/logs/*.log "${CIRRUS_WORKING_DIR}/logs/"
    log_artifacts:
      path: "logs/*.log"
      type: text/plain

generate_repo_task:
  depends_on:
    - build
  matrix:
    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd

  download_packages_script: |
    fetch -o "${CIRRUS_WORKING_DIR}/packages.zip" \
      "https://api.cirrus-ci.com/v1/artifact/build/${CIRRUS_BUILD_ID}/packages.zip"
    (cd ${CIRRUS_WORKING_DIR} && unzip packages.zip)
    ls -al "${CIRRUS_WORKING_DIR}/packages"
    pkg repo "${CIRRUS_WORKING_DIR}/packages"
    ls -al "${CIRRUS_WORKING_DIR}/packages"

  packages_artifacts: |
    path: "packages/*"

test_task:
  depends_on:
    - generate_repo
  matrix:
    - compute_engine_instance:
        image_project: freebsd-org-cloud-dev
        image: family/freebsd-13-0
        platform: freebsd

  define_common_variables_script: |

    # e.g. 122
    PD_VERSION_SHORT=`uname -r | sed -e 's/-.*//' -e 's/\.//'`

    # e.g. amd64
    PD_MACHINE=`uname -m`

    # e.g. 12.2-RELEASE
    PD_RELEASE_NAME=`uname -r | sed -e 's/-p.*//'`

    # e.g. 122amd64
    PD_JAIL_NAME="${PD_VERSION_SHORT}${PD_MACHINE}"

    cat << __EOF__ >> ${CIRRUS_ENV}
    PD_VERSION_SHORT=${PD_VERSION_SHORT}
    PD_MACHINE=${PD_MACHINE}
    PD_RELEASE_NAME=${PD_RELEASE_NAME}
    PD_JAIL_NAME=${PD_JAIL_NAME}
    __EOF__
    cat ${CIRRUS_ENV}

  show_env_script: |
    env | sort

  download_packages_script: |
    fetch -o ${CIRRUS_WORKING_DIR}/packages.zip \
      "https://api.cirrus-ci.com/v1/artifact/build/${CIRRUS_BUILD_ID}/packages.zip"
    (cd ${CIRRUS_WORKING_DIR} && unzip packages.zip)
    ls -alR ${CIRRUS_WORKING_DIR}/packages

  setup_pkg_conf: |
    mkdir -p /usr/local/etc/pkg/repos
    cat < __EOF__ > /usr/local/etc/pkg/repos/local.conf
    local: {
      URL: "file:///${CIRRUS_WORKING_DIR}/packages/${PD_JAIL_NAME}"
      ENABLED: yes
    }
    __EOF__
    cat /usr/local/etc/pkg/repos/local.conf

  install_packages_script: |

    # create a list of all packages in the repository
    PD_ALL_ORIGIN=`echo */* | sed -e 's|/[[:space:]]| |g' -e 's|/$||'`
    echo "PD_ALL_ORIGIN=${PD_ALL_ORIGIN}"

    # install ${PD_ALL_ORIGIN}
    for D in ${PD_ALL_ORIGIN}; do
      PD_FLAVORS=`make -V FLAVORS -C "${D}"`
      echo "PD_FLAVORS=${PD_FLAVORS}"
      for F in ${PD_FLAVORS}; do
        echo "FLAVOR=${F}"
        P=`make -V PKGNAME -C "${D}" FLAVOR="${F}"`
        echo "${P}"
        pkg install --repository local "${P}"
      done
    done
